{"version":3,"sources":["components/CenterOnLocationChange.tsx","App.tsx","reportWebVitals.ts","index.tsx","App.module.css"],"names":["CenterOnLocationChange","lat","lng","map","useMap","useEffect","zoom","getZoom","setView","PatriIcon","L","icon","iconUrl","iconSize","iconAnchor","rawFirebaseLocations","Object","values","mock","locations","data","timestamp","lon","slice","length","first","last","App","useState","locationIndex","setLocationIndex","sliderValue","setSliderValue","realPosition","className","styles","MapContainer","center","TileLayer","attribution","url","Marker","position","bottomMenu","menuContent","dates","Date","toLocaleString","type","min","max","value","onChange","e","parseInt","target","index","lastDistance","i","currentLocation","currentDist","Math","abs","findIndexNearestTo","overlay","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"2sggGAGaA,EAA2D,SAAC,GAGlE,IAFLC,EAEI,EAFJA,IACAC,EACI,EADJA,IAEMC,EAAMC,cAOZ,OALAC,qBAAU,WACR,IAAMC,EAAOH,EAAII,UACjBJ,EAAIK,QAAQ,CAAEP,MAAKC,OAAOI,KACzB,CAACL,EAAKC,IAEF,MC+BT,IAAMO,EAAYC,IAAEC,KAAK,CACvBC,QAAkC,aAClCC,SAAU,CAAC,GAAI,IACfC,WAAY,CAAC,GAAI,MAGbC,EAAwBC,OAAOC,OACnCC,GASIC,EAAYJ,EACfZ,KAAI,YAA0B,IAAvBiB,EAAsB,EAAtBA,KAMN,MAL2B,CACzBC,UAF0B,EAAhBA,UAGVpB,IAAKmB,EAAKnB,IACVC,IAAKkB,EAAKE,QAIbC,MAAM,GAAIR,EAAqBS,QAE5BC,EAAQN,EAAU,GAClBO,EAAOP,EAAUA,EAAUK,OAAS,GAgE3BG,MA9Df,WAAgB,IAAD,EAC6BC,mBAAST,EAAUK,OAAS,GADzD,mBACNK,EADM,KACSC,EADT,OAGyBF,mBAASF,EAAKL,WAHvC,mBAGNU,EAHM,KAGOC,EAHP,KAKPC,EAAed,EAAUU,GAqB/B,OACE,sBAAKK,UAAWC,IAAOhC,IAAvB,UACE,eAACiC,EAAA,EAAD,CAAcC,OAAQJ,EAAc3B,KAAM,EAA1C,UACE,cAACgC,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,uDAEN,cAACC,EAAA,EAAD,CAAQC,SAAUT,EAActB,KAAMF,IACtC,cAAC,EAAD,CAAwBR,IAAKgC,EAAahC,IAAKC,IAAK+B,EAAa/B,SAEnE,sBAAKgC,UAAWC,IAAOQ,WAAvB,UACE,sBAAKT,UAAWC,IAAOS,YAAvB,UACE,mBAAGV,UAAWC,IAAOU,MAArB,SACG,IAAIC,KAAKf,GAAagB,mBAEzB,uBACEC,KAAK,QACLC,IAAKxB,EAAMJ,UACX6B,IAAKxB,EAAKL,UACV8B,MAAOpB,EACPqB,SAAU,SAACC,GACT,IAAMhC,EAAYiC,SAASD,EAAEE,OAAOJ,OAE9BK,EAnHb,SAA4BnC,GAIjC,IAHA,IAAIK,EAAO,EACP+B,EAAe,KAEVC,EAAI,EAAGA,EAAIvC,EAAUK,OAAQkC,IAAK,CACzC,IAAMC,EAAkBxC,EAAUuC,GAE5BE,EAAcC,KAAKC,IAAIH,EAAgBtC,UAAYA,GAErDuC,EAAcH,IAChB/B,EAAOgC,EACPD,EAAeG,GAInB,OAAOlC,EAoGmBqC,CAAmB1C,GAEjCS,EAAiB0B,GACjBxB,EAAeX,SAIrB,qBAAKa,UAAWC,IAAO6B,iBCrHhBC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBChBAc,EAAOC,QAAU,CAAC,IAAM,iBAAiB,WAAa,wBAAwB,YAAc,yBAAyB,MAAQ,mBAAmB,QAAU,wB","file":"static/js/main.37b15d9a.chunk.js","sourcesContent":["import { FC, useEffect } from \"react\";\nimport { useMap } from \"react-leaflet\";\n\nexport const CenterOnLocationChange: FC<{ lat: number; lng: number }> = ({\n  lat,\n  lng,\n}) => {\n  const map = useMap();\n\n  useEffect(() => {\n    const zoom = map.getZoom();\n    map.setView({ lat, lng }, zoom);\n  }, [lat, lng]);\n\n  return null;\n};\n","import React, { FC, useEffect, useState } from \"react\";\nimport L from \"leaflet\";\nimport { MapContainer, TileLayer, Marker, Popup, useMap } from \"react-leaflet\";\nimport styles from \"./App.module.css\";\nimport \"leaflet/dist/leaflet.css\";\nimport mock from \"./mock.json\";\nimport { CenterOnLocationChange } from \"./components/CenterOnLocationChange\";\nimport { VesselLocationNode } from \"./firebase/typings\";\n\nexport function findIndexNearestTo(timestamp: number) {\n  let last = 0;\n  let lastDistance = 900000000000000;\n\n  for (let i = 0; i < locations.length; i++) {\n    const currentLocation = locations[i];\n\n    const currentDist = Math.abs(currentLocation.timestamp - timestamp);\n\n    if (currentDist < lastDistance) {\n      last = i;\n      lastDistance = currentDist;\n    }\n  }\n\n  return last;\n}\n\n/*\nimport firebase from \"firebase\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBThWjVqdQVhkOm-P4VwtOkK1XvoQBFjBs\",\n  authDomain: \"patri-chaser.firebaseapp.com\",\n  databaseURL: \"https://patri-chaser-default-rtdb.europe-west1.firebasedatabase.app\",\n  projectId: \"patri-chaser\",\n  storageBucket: \"patri-chaser.appspot.com\",\n  messagingSenderId: \"191999461469\",\n  appId: \"1:191999461469:web:d17e4c14ed1ea2f1e0a5b4\",\n  measurementId: \"G-YL17SVHMQY\"\n};\n\n// Use your config values here.\nfirebase.initializeApp(firebaseConfig);\n*/\n\nconst PatriIcon = L.icon({\n  iconUrl: process.env.PUBLIC_URL + \"/patri.png\",\n  iconSize: [40, 40],\n  iconAnchor: [20, 20],\n});\n\nconst rawFirebaseLocations = (Object.values(\n  mock\n) as any) as VesselLocationNode[];\n\ntype Location = {\n  timestamp: number;\n  lat: number;\n  lng: number;\n};\n\nconst locations = rawFirebaseLocations\n  .map(({ data, timestamp }) => {\n    const newLocal: Location = {\n      timestamp,\n      lat: data.lat,\n      lng: data.lon,\n    };\n    return newLocal;\n  })\n  .slice(10, rawFirebaseLocations.length);\n\nconst first = locations[0];\nconst last = locations[locations.length - 1];\n\nfunction App() {\n  const [locationIndex, setLocationIndex] = useState(locations.length - 1);\n\n  const [sliderValue, setSliderValue] = useState(last.timestamp);\n\n  const realPosition = locations[locationIndex];\n\n  /* useEffect(() => {\n      const baz = Object.values(locations);\n      const foo = baz as any as MyNode[];\n\n      (async () => {\n        for (const data of baz) {\n          \n\n          setPosition({\n            lat: data.data.lat,\n            lng: data.data.lon\n          })\n          await sleep(10)\n        }\n      })();\n\n      console.log(foo[0].data.lat);\n  }, []) */\n\n  return (\n    <div className={styles.map}>\n      <MapContainer center={realPosition} zoom={8}>\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        <Marker position={realPosition} icon={PatriIcon} />\n        <CenterOnLocationChange lat={realPosition.lat} lng={realPosition.lng} />\n      </MapContainer>\n      <div className={styles.bottomMenu}>\n        <div className={styles.menuContent}>\n          <p className={styles.dates}>\n            {new Date(sliderValue).toLocaleString()}\n          </p>\n          <input\n            type=\"range\"\n            min={first.timestamp}\n            max={last.timestamp}\n            value={sliderValue}\n            onChange={(e) => {\n              const timestamp = parseInt(e.target.value);\n\n              const index = findIndexNearestTo(timestamp);\n\n              setLocationIndex(index);\n              setSliderValue(timestamp);\n            }}\n          />\n        </div>\n        <div className={styles.overlay}></div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n/*\n\nconst db = firebase.database()\n      const ref = db.ref(\"vessels\")\n\n      const foo = ref.child(\"locations\")\n\n\n      foo.on(\"value\", function(snapshot) {\n        console.log(snapshot.val());\n      }, function (errorObject: any) {\n        console.log(\"The read failed: \" + errorObject.code);\n      });\n\n\n      \n\n\n*/\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"map\":\"App_map__3ouXs\",\"bottomMenu\":\"App_bottomMenu__3Zmk_\",\"menuContent\":\"App_menuContent__1Ry4M\",\"dates\":\"App_dates__1kEE3\",\"overlay\":\"App_overlay__kgk5q\"};"],"sourceRoot":""}