{"version":3,"sources":["App.module.css","components/CenterOnLocationChange.tsx","utils/findIndexNearestTo.ts","utils/portsMapInfo.ts","utils/portIsTooClose.ts","utils/mapFirebaseData.tsx","firebase/firebase.ts","config/firebase.ts","hooks/usePatriLocations.ts","utils/estimateCoordinatesAtTime.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","CenterOnLocationChange","lat","lng","map","useMap","useEffect","zoom","getZoom","setView","binarySearch","locations","timestamp","length","middle","Math","floor","lowerPart","slice","upperPart","findIndexNearestTo","element","indexOf","portsMapInfo","id","country","city","position","portIsTooClose","currentPosition","portPosition","a","b","sqrt","mapFirebaseData","data","rawFirebaseLocations","Object","values","lastPos","lon","temperature","windTemperature","arrivalPort","firebase1","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","firebase","cachedLocations","mock","locationsCollection","firestore","collection","estimateCoordinatesAtTime","p2","p1","angle","distanceLatitude","distanceLongitude","atan2","calculateAngle","distanceTraveledEstimation","hip","pow","timeTookDistance","calculateSpeed","calculateDuration","cos","sin","PatriIcon","L","icon","iconUrl","process","iconSize","iconAnchor","DestinationIcon","App","useState","setLocations","lastLocation","orderBy","where","onSnapshot","snapshot","console","log","lastOldLocation","newerLocations","docs","el","filter","e","JSON","parse","stringify","allLocations","concat","usePatriLocations","setCurrentPosition","Date","now","sliderValue","setSliderValue","patriArrival","patriDeparture","daysToPatri","differenceInDays","polyLinePositions","nextPort","find","port","nextPortLocationPosition","className","styles","MapContainer","center","TileLayer","attribution","url","Marker","Polyline","positions","bottomMenu","menuContent","dates","toLocaleString","type","min","max","value","onChange","parseInt","target","index","findBoundingPointsForTimestamp","countDown","getTime","progress","overlay","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.77a5c761.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"map\":\"App_map__3ouXs\",\"bottomMenu\":\"App_bottomMenu__3Zmk_\",\"menuContent\":\"App_menuContent__1Ry4M\",\"dates\":\"App_dates__1kEE3\",\"overlay\":\"App_overlay__kgk5q\",\"countDown\":\"App_countDown__2fcTs\",\"progress\":\"App_progress__3wqwq\"};","import { FC, useEffect } from \"react\";\nimport { useMap } from \"react-leaflet\";\n\nexport const CenterOnLocationChange: FC<{ lat: number; lng: number }> = ({\n  lat,\n  lng,\n}) => {\n  const map = useMap();\n\n  useEffect(() => {\n    const zoom = map.getZoom();\n    map.setView({ lat, lng }, zoom);\n  }, [lat, lng]);\n\n  return null;\n};\n","import { Location } from \"../models/Location\";\n\nfunction binarySearch<T extends { timestamp: number }>(\n  locations: T[],\n  timestamp: number\n): T {\n  if (locations.length === 1) {\n    return locations[0];\n  }\n\n  const middle = Math.floor(locations.length / 2);\n\n  const lowerPart = locations.slice(0, middle);\n  const upperPart = locations.slice(middle, locations.length);\n\n  const pivot = lowerPart[lowerPart.length - 1];\n\n  if (timestamp > pivot.timestamp) {\n    return binarySearch(upperPart, timestamp);\n  } else {\n    return binarySearch(lowerPart, timestamp);\n  }\n}\n\nexport function findIndexNearestTo<T extends { timestamp: number }>(\n  locations: T[],\n  timestamp: number\n) {\n  const element = binarySearch(locations, timestamp);\n\n  return locations.indexOf(element) - 1;\n}\n\nexport function findBoundingPointsForTimestamp<T extends { timestamp: number }>(\n  locations: T[],\n  timestamp: number\n) {\n  const index = findIndexNearestTo(locations, timestamp);\n\n  const p1 = locations[index];\n  const p2 = locations[index + 1];\n\n  if (!p2) {\n    return {\n      p1,\n      p2: p1,\n    };\n  }\n\n  return { p1, p2 };\n}\n","import { LatLngLiteral } from \"leaflet\";\n\nexport type PortInfo = {\n  id: string;\n  position: LatLngLiteral;\n  country: string;\n  city: string;\n};\n\nexport const portsMapInfo: PortInfo[] = [\n  {\n    id: \"3302\",\n    country: \"España\",\n    city: \"Algeciras\",\n    position: {\n      lat: 36.17549129756906,\n      lng: -5.418971717099447,\n    },\n  },\n  {\n    id: \"21826\",\n    country: \"España\",\n    city: \"Algeciras\",\n    position: {\n      lat: 36.17549129756906,\n      lng: -5.418971717099447,\n    },\n  },\n  {\n    id: \"343\",\n    country: \"Suecia\",\n    city: \"Malmo\",\n    position: {\n      lat: 55.617983507540984,\n      lng: 13.001871231147542,\n    },\n  },\n  {\n    id: \"233\",\n    country: \"Polonia\",\n    city: \"Gdynia\",\n    position: {\n      lat: 54.54480274086806,\n      lng: 18.509637289041667,\n    },\n  },\n  {\n    id: \"22450\",\n    country: \"Polonia\",\n    city: \"Puerto de Gdynia\",\n    position: {\n      lat: 54.54480274086806,\n      lng: 18.509637289041667,\n    },\n  },\n  {\n    id: \"771\",\n    country: \"Lituania\",\n    city: \"Klaipėda\",\n    position: {\n      lat: 55.714,\n      lng: 21.11567,\n    },\n  },\n  {\n    id: \"251\",\n    country: \"Irlanda\",\n    city: \"Greenore\",\n    position: {\n      lat: 54.034677,\n      lng: -6.133334,\n    },\n  },\n];\n","import { LatLngLiteral } from \"leaflet\";\n\nconst VERY_NEAR_EPSILON = 0.02;\n\nexport function portIsTooClose(\n  currentPosition: LatLngLiteral,\n  portPosition: LatLngLiteral\n) {\n  const a = currentPosition.lat - portPosition.lat;\n  const b = currentPosition.lng - portPosition.lng;\n\n  const distance = Math.sqrt(a * a + b * b);\n\n  return distance < VERY_NEAR_EPSILON;\n}\n","import { VesselLocationNode } from \"../firebase/typings\";\n\nexport function mapFirebaseData(data: any) {\n  const rawFirebaseLocations = (Object.values(\n    data\n  ) as any) as VesselLocationNode[];\n\n  return rawFirebaseLocations\n    .map(({ data }) => ({\n      timestamp: data.lastPos * 1000,\n      lat: data.lat,\n      lng: data.lon,\n      temperature: data.windTemperature,\n      arrivalPort: data.arrivalPort,\n    }))\n    .slice(10, rawFirebaseLocations.length);\n}\n","import firebase1 from \"firebase\";\nimport { firebaseConfig } from \"../config/firebase\";\n\nfirebase1.initializeApp(firebaseConfig);\nfirebase1.analytics();\n\nexport const firebase = firebase1;\n","export const DISABLE_FIREBASE = true;\n\nexport const firebaseConfig = {\n  apiKey: \"AIzaSyBThWjVqdQVhkOm-P4VwtOkK1XvoQBFjBs\",\n  authDomain: \"patri-chaser.firebaseapp.com\",\n  databaseURL:\n    \"https://patri-chaser-default-rtdb.europe-west1.firebasedatabase.app\",\n  projectId: \"patri-chaser\",\n  storageBucket: \"patri-chaser.appspot.com\",\n  messagingSenderId: \"191999461469\",\n  appId: \"1:191999461469:web:d17e4c14ed1ea2f1e0a5b4\",\n  measurementId: \"G-YL17SVHMQY\",\n};\n","import { useEffect, useState } from \"react\";\nimport { mapFirebaseData } from \"../utils/mapFirebaseData\";\nimport mock from \"../mock.json\";\nimport { firebase } from \"../firebase/firebase\";\n\nconst cachedLocations = mapFirebaseData(mock);\n\nconst db = firebase.firestore();\nconst locationsCollection = db.collection(\"locations\");\n\nexport function usePatriLocations() {\n  const [locations, setLocations] = useState(cachedLocations);\n\n  useEffect(() => {\n    const lastLocation = locations[locations.length - 1];\n\n    locationsCollection\n      .orderBy(\"timestamp\")\n      .where(\"timestamp\", \">\", lastLocation.timestamp)\n      .onSnapshot((snapshot) => {\n        console.log(\"ON SNAPSHOT\");\n        const lastOldLocation = locations[locations.length - 1];\n\n        console.log(\"last old location\", lastOldLocation.timestamp);\n        const newerLocations = mapFirebaseData(\n          snapshot.docs.map((el) => el.data())\n        ).filter((e) => e.timestamp > lastOldLocation.timestamp);\n\n        console.log({\n          newerLocations: JSON.parse(JSON.stringify(newerLocations)),\n        });\n\n        const allLocations = locations.concat(newerLocations);\n\n        setLocations(allLocations);\n      });\n  }, []);\n\n  const lastLocation = locations[locations.length - 1];\n\n  return { locations, lastLocation };\n}\n","export type PositionAtTime = {\n  lat: number;\n  lng: number;\n  timestamp: number;\n};\n\nexport function estimateCoordinatesAtTime(\n  p2: PositionAtTime,\n  p1: PositionAtTime,\n  timestamp: number\n): PositionAtTime {\n  const angle = calculateAngle(p1, p2);\n  const speed = calculateSpeed(p1, p2);\n\n  const duration = calculateDuration(timestamp, p1);\n\n  const distanceTraveledEstimation = speed * duration;\n\n  const lat = Math.cos(angle) * distanceTraveledEstimation + p1.lat;\n  const lng = Math.sin(angle) * distanceTraveledEstimation + p1.lng;\n\n  return { lat, lng, timestamp };\n}\n\nfunction calculateSpeed(p1: PositionAtTime, p2: PositionAtTime) {\n  const b = p2.lat - p1.lat;\n  const a = p2.lng - p1.lng;\n\n  const hip = Math.sqrt(Math.pow(b, 2) + Math.pow(a, 2));\n  const timeTookDistance = p2.timestamp - p1.timestamp;\n\n  const speed = hip / timeTookDistance;\n\n  return speed;\n}\n\nfunction calculateAngle(p1: PositionAtTime, p2: PositionAtTime) {\n  const distanceLatitude = p2.lat - p1.lat;\n  const distanceLongitude = p2.lng - p1.lng;\n\n  return Math.atan2(distanceLongitude, distanceLatitude);\n}\n\nfunction calculateDuration(timestamp: number, p1: PositionAtTime) {\n  return timestamp - p1.timestamp;\n}\n","import React, { useEffect, useState } from \"react\";\nimport L, { LatLngLiteral } from \"leaflet\";\nimport { MapContainer, Marker, Polyline, TileLayer } from \"react-leaflet\";\nimport styles from \"./App.module.css\";\nimport \"leaflet/dist/leaflet.css\";\nimport differenceInDays from \"date-fns/differenceInDays\";\nimport { CenterOnLocationChange } from \"./components/CenterOnLocationChange\";\nimport { findBoundingPointsForTimestamp } from \"./utils/findIndexNearestTo\";\nimport { portsMapInfo } from \"./utils/portsMapInfo\";\nimport { portIsTooClose } from \"./utils/portIsTooClose\";\nimport { usePatriLocations } from \"./hooks/usePatriLocations\";\nimport { estimateCoordinatesAtTime } from \"./utils/estimateCoordinatesAtTime\";\n\nconst PatriIcon = L.icon({\n  iconUrl: process.env.PUBLIC_URL + \"/patri.png\",\n  iconSize: [40, 40],\n  iconAnchor: [20, 20],\n});\n\nconst DestinationIcon = L.icon({\n  iconUrl: process.env.PUBLIC_URL + \"/tracking.png\",\n  iconSize: [32, 32],\n  iconAnchor: [16, 16],\n});\n\nfunction App() {\n  const { locations, lastLocation } = usePatriLocations();\n  const [currentPosition, setCurrentPosition] = useState(lastLocation);\n  const [sliderValue, setSliderValue] = useState(Date.now());\n\n  useEffect(() => {\n    setCurrentPosition(lastLocation);\n  }, [lastLocation]);\n\n  const patriArrival = new Date(2021, 3, 10);\n  const patriDeparture = new Date(2020, 11, 22, 22, 0, 0);\n\n  const daysToPatri = differenceInDays(patriArrival, new Date());\n\n  const filteredPolylinesLocations: LatLngLiteral[] = locations.filter(\n    (e) => e.timestamp <= sliderValue\n  );\n  const polyLinePositions = filteredPolylinesLocations.concat({\n    lat: currentPosition.lat,\n    lng: currentPosition.lng,\n  });\n\n  console.log(currentPosition);\n\n  const nextPort = portsMapInfo.find(\n    (port) => port.id === currentPosition.arrivalPort?.id\n  );\n  const nextPortLocationPosition = nextPort?.position;\n\n  return (\n    <div className={styles.map}>\n      <MapContainer center={currentPosition} zoom={8}>\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        <Marker position={currentPosition} icon={PatriIcon} />\n        {nextPortLocationPosition &&\n        !portIsTooClose(currentPosition, nextPortLocationPosition) ? (\n          <Marker position={nextPortLocationPosition} icon={DestinationIcon} />\n        ) : null}\n        <CenterOnLocationChange\n          lat={currentPosition.lat}\n          lng={currentPosition.lng}\n        />\n        <Polyline positions={polyLinePositions} />\n      </MapContainer>\n      <div className={styles.bottomMenu}>\n        <div className={styles.menuContent}>\n          <p className={styles.dates}>\n            {new Date(sliderValue).toLocaleString()}\n            {currentPosition.temperature != null\n              ? ` | ${currentPosition.temperature}ºC`\n              : null}\n            {\" | \"}\n            {nextPort ? `${nextPort.city} (${nextPort.country})` : null}\n          </p>\n          <input\n            type=\"range\"\n            min={1608802672283}\n            max={Date.now()}\n            value={sliderValue}\n            onChange={(e) => {\n              const timestamp = parseInt(e.target.value);\n              const { p1, p2 } = findBoundingPointsForTimestamp(\n                locations,\n                timestamp\n              );\n\n              const { lat, lng } = estimateCoordinatesAtTime(p2, p1, timestamp);\n\n              setCurrentPosition({ ...p1, lat, lng });\n              setSliderValue(timestamp);\n            }}\n          />\n          <p className={styles.countDown}>Patri llega en {daysToPatri} días</p>\n          <progress\n            value={new Date().getTime() - patriDeparture.getTime()}\n            max={patriArrival.getTime() - patriDeparture.getTime()}\n            className={styles.progress}\n          />\n        </div>\n        <div className={styles.overlay} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}