{"version":3,"sources":["App.module.css","components/CenterOnLocationChange.tsx","utils/mapFirebaseData.tsx","App.tsx","utils/findIndexNearestTo.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","CenterOnLocationChange","lat","lng","map","useMap","useEffect","zoom","getZoom","setView","mapFirebaseData","data","rawFirebaseLocations","Object","values","timestamp","lon","temperature","windTemperature","slice","length","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","PatriIcon","L","icon","iconUrl","process","iconSize","iconAnchor","cachedLocations","mock","App","useState","locations","setLocations","locationIndex","setLocationIndex","Date","now","sliderValue","setSliderValue","position","database","ref","child","on","snapshot","val","console","log","errorObject","error","className","styles","MapContainer","center","TileLayer","attribution","url","Marker","bottomMenu","menuContent","dates","toLocaleString","type","min","max","value","onChange","e","parseInt","target","index","last","lastDistance","i","currentLocation","currentDist","Math","abs","findIndexNearestTo","overlay","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.15b9048e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"map\":\"App_map__3ouXs\",\"bottomMenu\":\"App_bottomMenu__3Zmk_\",\"menuContent\":\"App_menuContent__1Ry4M\",\"dates\":\"App_dates__1kEE3\",\"overlay\":\"App_overlay__kgk5q\"};","import { FC, useEffect } from \"react\";\nimport { useMap } from \"react-leaflet\";\n\nexport const CenterOnLocationChange: FC<{ lat: number; lng: number }> = ({\n  lat,\n  lng,\n}) => {\n  const map = useMap();\n\n  useEffect(() => {\n    const zoom = map.getZoom();\n    map.setView({ lat, lng }, zoom);\n  }, [lat, lng]);\n\n  return null;\n};\n","import { VesselLocationNode } from \"../firebase/typings\";\nimport { Location } from \"../models/Location\";\n\nexport function mapFirebaseData(data: any) {\n  const rawFirebaseLocations = (Object.values(\n    data\n  ) as any) as VesselLocationNode[];\n\n  return rawFirebaseLocations\n    .map(({ data, timestamp }) => {\n      const newLocal: Location = {\n        timestamp,\n        lat: data.lat,\n        lng: data.lon,\n        temperature: data.windTemperature,\n      };\n      return newLocal;\n    })\n    .slice(10, rawFirebaseLocations.length);\n}\n","import React, { useEffect, useState } from \"react\";\nimport L from \"leaflet\";\nimport { MapContainer, TileLayer, Marker } from \"react-leaflet\";\nimport styles from \"./App.module.css\";\nimport \"leaflet/dist/leaflet.css\";\nimport mock from \"./mock.json\";\nimport { CenterOnLocationChange } from \"./components/CenterOnLocationChange\";\nimport { findIndexNearestTo } from \"./utils/findIndexNearestTo\";\n\nimport firebase from \"firebase\";\nimport { mapFirebaseData } from \"./utils/mapFirebaseData\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBThWjVqdQVhkOm-P4VwtOkK1XvoQBFjBs\",\n  authDomain: \"patri-chaser.firebaseapp.com\",\n  databaseURL:\n    \"https://patri-chaser-default-rtdb.europe-west1.firebasedatabase.app\",\n  projectId: \"patri-chaser\",\n  storageBucket: \"patri-chaser.appspot.com\",\n  messagingSenderId: \"191999461469\",\n  appId: \"1:191999461469:web:d17e4c14ed1ea2f1e0a5b4\",\n  measurementId: \"G-YL17SVHMQY\",\n};\n\n// Use your config values here.\nfirebase.initializeApp(firebaseConfig);\nfirebase.analytics();\n\nconst PatriIcon = L.icon({\n  iconUrl: process.env.PUBLIC_URL + \"/patri.png\",\n  iconSize: [40, 40],\n  iconAnchor: [20, 20],\n});\n\nconst cachedLocations = mapFirebaseData(mock);\n\nfunction App() {\n  const [locations, setLocations] = useState(cachedLocations);\n  const [locationIndex, setLocationIndex] = useState(locations.length - 1);\n  const [sliderValue, setSliderValue] = useState(Date.now());\n\n  const position = locations[locationIndex];\n\n  useEffect(() => {\n    const db = firebase.database();\n    const ref = db.ref(\"vessels\");\n\n    const firebaseLocationsRef = ref.child(\"locations\");\n\n    firebaseLocationsRef.on(\n      \"value\",\n      (snapshot) => {\n        const data = snapshot.val();\n\n        console.log(data);\n        const locations = mapFirebaseData(data);\n        setLocations(locations);\n        setLocationIndex(locations.length - 1);\n      },\n      (errorObject: any) => {\n        console.error(errorObject);\n      }\n    );\n  }, []);\n\n  return (\n    <div className={styles.map}>\n      <MapContainer center={position} zoom={8}>\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        <Marker position={position} icon={PatriIcon} />\n        <CenterOnLocationChange lat={position.lat} lng={position.lng} />\n      </MapContainer>\n      <div className={styles.bottomMenu}>\n        <div className={styles.menuContent}>\n          <p className={styles.dates}>\n            {new Date(sliderValue).toLocaleString()}\n            {position.temperature != null\n              ? ` | ${position.temperature}ÂºC`\n              : null}\n          </p>\n          <input\n            type=\"range\"\n            min={1608802672283}\n            max={Date.now()}\n            value={sliderValue}\n            onChange={(e) => {\n              const timestamp = parseInt(e.target.value);\n\n              const index = findIndexNearestTo(locations, timestamp);\n\n              setLocationIndex(index);\n              setSliderValue(timestamp);\n            }}\n          />\n        </div>\n        <div className={styles.overlay}></div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n/*\n\nconst db = firebase.database()\n      const ref = db.ref(\"vessels\")\n\n      const foo = ref.child(\"locations\")\n\n\n      foo.on(\"value\", function(snapshot) {\n        console.log(snapshot.val());\n      }, function (errorObject: any) {\n        console.log(\"The read failed: \" + errorObject.code);\n      });\n\n\n      \n\n\n*/\n","import { Location } from \"../models/Location\";\n\nexport function findIndexNearestTo(locations: Location[], timestamp: number) {\n  let last = 0;\n  let lastDistance = 900000000000000;\n\n  for (let i = 0; i < locations.length; i++) {\n    const currentLocation = locations[i];\n\n    const currentDist = Math.abs(currentLocation.timestamp - timestamp);\n\n    if (currentDist < lastDistance) {\n      last = i;\n      lastDistance = currentDist;\n    }\n  }\n\n  return last;\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}